################################################################################
#
# Title:        ONTAP-81-01 - Base Deployment
# Author:       NetApp Inc. (badrian)
# Initial 
# Create Date:  2025-02-13
# Description:  Advanced - Self-Service
#               - Base Deployment
#
# URLs:         https://docs.netapp.com/us-en/ontap/index.html
#               https://galaxy.ansible.com/netapp/ontap
#
# Built-in help:
# ansible-doc netapp.ontap.<module_name>
# 
################################################################################

- hosts:                               "ontap"
  name:                                "ONTAP-81-01 - Base Deployment"
  gather_facts:                        false
  vars_files:
    - ../../vars/{{ inventory_dir | split('/') | last }}/vars.yml
    - ../../vars/{{ inventory_dir | split('/') | last }}/vault.yml
  collections:
    - netapp.ontap
  module_defaults:
    group/netapp.ontap.netapp_ontap:
      hostname:                        "{{ ansible_host }}"
      username:                        "{{ ontap_admin_user }}"
      password:                        "{{ ontap_admin_password }}"
      https:                           true
      validate_certs:                  false
      use_rest:                        "always"

  pre_tasks:

  tasks:
    - name: Create SVMs for testing
      netapp.ontap.na_ontap_svm:
        state:                         present
        name:                          "{{ item.name }}"
        services:
          cifs:
            allowed:                   "{{ item.cifs.allowed | default(omit) }}"
          ndmp:
            allowed:                   "{{ item.ndmp.allowed | default(omit) }}"
          nfs:
            allowed:                   "{{ item.nfs.allowed | default(omit) }}"
          fcp:
            allowed:                   "{{ item.fcp.allowed | default(omit) }}"
          iscsi:
            allowed:                   "{{ item.iscsi.allowed | default(omit) }}"
          nvme:
            allowed:                   "{{ item.nvme.allowed | default(omit) }}"
      loop:
        "{{ svm_svms }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - svm_svms | length > 0
        - item.name is defined
        - item.name is regex('^sp-svm.*')
        - security_authentication_cluster_ad_proxy.svm.name is defined and
          security_authentication_cluster_ad_proxy.svm.name != item.name
  
    - name: Patch additional SVM parameters - auto_enable_analytics
      netapp.ontap.na_ontap_rest_cli:
        command:                       'vserver'
        verb:                          'PATCH'
        params: 
          vserver:                     "{{ item.name }}"
        body:
          auto_enable_analytics:       "{{ item.auto_enable_analytics }}"
      loop:
        "{{ svm_svms }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - svm_svms | length > 0
        - item.name is defined
        - item.name is regex('^sp-svm.*')
        - item.auto_enable_analytics is defined
        - security_authentication_cluster_ad_proxy.svm.name is defined and
          security_authentication_cluster_ad_proxy.svm.name != item.name
  
    - name: Patch additional SVM parameters - auto_enable_activity_tracking
      netapp.ontap.na_ontap_rest_cli:
        command:                       'vserver'
        verb:                          'PATCH'
        params:
          vserver:                     "{{ item.name }}"
        body:
          auto_enable_activity_tracking:
                                       "{{ item.auto_enable_activity_tracking }}"
      loop:
        "{{ svm_svms }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - svm_svms | length > 0
        - item.name is defined
        - item.name is regex('^sp-svm.*')
        - item.auto_enable_activity_tracking is defined
        - security_authentication_cluster_ad_proxy.svm.name is defined and
          security_authentication_cluster_ad_proxy.svm.name != item.name

    - name: Create network interfaces on test SVMs
      netapp.ontap.na_ontap_interface:
        state:                         present
        vserver:                       "{{ item.svm.name }}"
        interface_name:                "{{ item.name }}"
        home_node:                     "{{ item.location.home_node.name }}"
        home_port:                     "{{ item.location.home_port.name }}"
        address:                       "{{ item.ip.address }}"
        netmask:                       "{{ item.ip.netmask }}"
        service_policy:                "{{ item.service_policy.name | default(omit) }}"
        is_auto_revert:                "{{ item.location.auto_revert | default(omit) }}"
      loop:
        "{{ network_ip_interfaces }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - network_ip_interfaces | length > 0
        - item.svm.name is defined
        - item.svm.name is regex('^sp-svm.*')
        - item.scope == "svm"
        - security_authentication_cluster_ad_proxy.svm.name is defined and
          security_authentication_cluster_ad_proxy.svm.name != item.svm.name 

    - name: Configure default route on test SVMs
      netapp.ontap.na_ontap_net_routes:
        state:                         present
        vserver:                       "{{ item.name }}"
        destination:                   "0.0.0.0/0"
        gateway:                       "{{ all_default_gateway }}"
      loop:
        "{{ svm_svms }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - svm_svms | length > 0
        - item.name is defined
        - item.name is regex('^sp-svm.*')
        - security_authentication_cluster_ad_proxy.svm.name is defined and
          security_authentication_cluster_ad_proxy.svm.name != item.name

    - name: Configure DNS on test SVMs
      netapp.ontap.na_ontap_dns:
        state:                         present
        vserver:                       "{{ item.name }}"
        domains:                       "{{ item.dns.domains }}"
        nameservers:                   "{{ item.dns.servers }}"
      loop:
        "{{ svm_svms }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - svm_svms | length > 0
        - item.name is defined
        - item.name is regex('^sp-svm.*')
        - security_authentication_cluster_ad_proxy.svm.name is defined and
          security_authentication_cluster_ad_proxy.svm.name != item.name

    - name: Configure NFS service on SVMs
      netapp.ontap.na_ontap_nfs:
        state:                         present
        vserver:                       "{{ item.svm.name }}"
        service_state:                 "{{ 'started' if item.enabled else 'stopped'}}"
        nfsv3:                         "{{ 'enabled' if item.protocol.v3_enabled else 'disabled'}}"
        nfsv4:                         "{{ 'enabled' if item.protocol.v40_enabled else 'disabled'}}"
        nfsv41:                        "{{ 'enabled' if item.protocol.v41_enabled else 'disabled'}}"
        showmount:                     "{{ 'enabled' if item.showmount_enabled else 'disabled'}}"
      loop:
        "{{ protocols_nfs_services }}"
      loop_control:
        label: "{{ item.svm.name }}"
      when:
        - protocols_nfs_services | length > 0
        - item.svm.name is defined
        - item.svm.name is regex('^sp-svm.*')
        - security_authentication_cluster_ad_proxy.svm.name is defined and
          security_authentication_cluster_ad_proxy.svm.name != item.svm.name
  
    - name: Patch additional SVM NFS parameters - v3-64bit-identifiers
      netapp.ontap.na_ontap_rest_cli:
        command:                       'vserver/nfs'
        verb:                          'PATCH'
        params: 
          vserver:                     "{{ item.svm.name }}"
        body:
          v3-64bit-identifiers:        "{{ 'enabled' if item.protocol.v3_64bit_identifiers_enabled else 'disabled' }}"
      loop:
        "{{ protocols_nfs_services }}"
      loop_control:
        label: "{{ item.svm.name }}"
      when:
        - protocols_nfs_services | length > 0
        - item.svm.name is defined
        - item.svm.name is regex('^sp-svm.*')
        - item.protocol.v3_64bit_identifiers_enabled is defined
        - security_authentication_cluster_ad_proxy.svm.name is defined and
          security_authentication_cluster_ad_proxy.svm.name != item.svm.name
  
    - name: Patch additional SVM NFS parameters - v4-64bit-identifiers
      netapp.ontap.na_ontap_rest_cli:
        command:                       'vserver/nfs'
        verb:                          'PATCH'
        params: 
          vserver:                     "{{ item.svm.name }}"
        body:
          v4-64bit-identifiers:        "{{ 'enabled' if item.protocol.v4_64bit_identifiers_enabled else 'disabled' }}"
      loop:
        "{{ protocols_nfs_services }}"
      loop_control:
        label: "{{ item.svm.name }}"
      when:
        - protocols_nfs_services | length > 0
        - item.svm.name is defined
        - item.svm.name is regex('^sp-svm.*')
        - item.protocol.v4_64bit_identifiers_enabled is defined
        - security_authentication_cluster_ad_proxy.svm.name is defined and
          security_authentication_cluster_ad_proxy.svm.name != item.svm.name

    - name: Create read-only export policy for NFS
      netapp.ontap.na_ontap_export_policy:
        state:                         present
        name:                          "ro_{{ item.svm.name }}"
        vserver:                       "{{ item.svm.name }}"
      loop:
        "{{ protocols_nfs_services }}"
      loop_control:
        label: "{{ item.svm.name }}"
      when:
        - protocols_nfs_services | length > 0
        - item.svm.name is defined 
        - item.svm.name is regex('^sp-svm.*')
        - security_authentication_cluster_ad_proxy.svm.name is defined and
          security_authentication_cluster_ad_proxy.svm.name != item.svm.name
  
    - name: Create read-only export policy rules for SVM root volume for NFS
      na_ontap_export_policy_rule:
        state:                         present
        name:                          "ro_{{ item.svm.name }}"
        vserver:                       "{{ item.svm.name }}"
        client_match:                  "{{ groups['linux'] | map('extract', hostvars, ['ansible_host']) }}"
        ro_rule:                       "any"
        rw_rule:                       "none"
        protocol:                      "nfs"
        super_user_security:           "none"
        allow_suid:                    false
      loop:
        "{{ protocols_nfs_services }}"
      loop_control:
        label: "{{ item.svm.name }}"
      when:
        - protocols_nfs_services | length > 0
        - item.svm.name is defined
        - item.svm.name is regex('^sp-svm.*')
        - security_authentication_cluster_ad_proxy.svm.name is defined and
          security_authentication_cluster_ad_proxy.svm.name != item.svm.name

    - name: Apply read-only export policy to SVM's root volume for NFS
      netapp.ontap.na_ontap_volume:
        state:                         present
        name:                          "{{ item.svm.name.replace('-','_') }}_root"
        vserver:                       "{{ item.svm.name }}"
        export_policy:                 "ro_{{ item.svm.name }}"
      loop:
        "{{ protocols_nfs_services }}"
      loop_control:
        label: "{{ item.svm.name }}"
      when:
        - protocols_nfs_services | length > 0
        - item.svm.name is defined
        - item.svm.name is regex('^sp-svm.*')
        - security_authentication_cluster_ad_proxy.svm.name is defined and
          security_authentication_cluster_ad_proxy.svm.name != item.svm.name

    - name: Create active directory preferred domain controllers
      netapp.ontap.na_ontap_active_directory_domain_controllers:
        state:                         present
        vserver:                       "{{ item.0.key }}"
        fqdn:                          "{{ item.1.fqdn }}"
        server_ip:                     "{{ item.1.ip }}"
      loop:
        "{{ protocols_active_directory | dict2items | subelements('value.preferred-domain-controllers') }}"
      loop_control:
        label: "{{ item.0.key }}"
      when:
        - protocols_active_directory | list | length > 0
        - item.0.key is regex('^sp-svm.*')
        - security_authentication_cluster_ad_proxy.svm.name is defined and
          security_authentication_cluster_ad_proxy.svm.name != item.0.key
  
    - name: Create CIFS server on SVMs
      netapp.ontap.na_ontap_cifs_server:
        state:                         present
        name:                          "{{ item.name }}"
        vserver:                       "{{ item.svm.name }}"
        service_state:                 "started"
        domain:                        "{{ item.ad_domain.fqdn }}"
        ou:                            "{{ item.ad_domain.organizational_unit }}"
        admin_user_name:               "{{ all_ad_join_user }}"
        admin_password:                "{{ all_ad_join_password }}"
      loop:
        "{{ protocols_cifs_services }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - protocols_cifs_services | length > 0
        - item.name is defined
        - item.svm.name is regex('^sp-svm.*')
        - security_authentication_cluster_ad_proxy.svm.name is defined and
          security_authentication_cluster_ad_proxy.svm.name != item.svm.name
  
    - name: Patch additional SVM CIFS parameters - comment
      netapp.ontap.na_ontap_rest_cli:
        command:                       'vserver/cifs'
        verb:                          'PATCH'
        params: 
          vserver:                     "{{ item.svm.name }}"
        body:
          comment:                     "{{ item.comment }}"
      loop:
        "{{ protocols_cifs_services }}"
      loop_control:
        label: "{{ item.svm.name }}"
      when:
        - protocols_cifs_services | length > 0
        - item.svm.name is defined
        - item.svm.name is regex('^sp-svm.*')
        - item.comment is defined
        - security_authentication_cluster_ad_proxy.svm.name is defined and
          security_authentication_cluster_ad_proxy.svm.name != item.svm.name

  post_tasks:

- hosts:                               "secondary_storage_clusters"
  name:                                "ONTAP-80-00 - Base Deployment - secondary only"
  gather_facts:                        false
  vars_files:
    - ../../vars/{{ inventory_dir | split('/') | last }}/vars.yml
    - ../../vars/{{ inventory_dir | split('/') | last }}/vault.yml
  collections:
    - netapp.ontap
  module_defaults:
    group/netapp.ontap.netapp_ontap:
      hostname:                        "{{ ansible_host }}"
      username:                        "{{ ontap_admin_user }}"
      password:                        "{{ ontap_admin_password }}"
      https:                           true
      validate_certs:                  false
      use_rest:                        "always"

  pre_tasks:

  tasks:
    - name: Create protection policy - Standard
      netapp.ontap.na_ontap_snapmirror_policy:
        state:                         present
        vserver:                       "{{ item.name }}"
        policy_name:                   "{{ ontap_80_snapm_policy_standard }}"
        policy_type:                   "mirror_vault"
        snapmirror_label:
          - "5min"
          - "hourly"
          - "daily"
          - "weekly"
        keep:
          - 3
          - 5
          - 5
          - 2
      loop:
        "{{ svm_svms }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - svm_svms | length > 0
        - item.name is defined
        - item.name is regex('^sp-svm.*')

    - name: Create protection policy - Premium
      netapp.ontap.na_ontap_snapmirror_policy:
        state:                         present
        vserver:                       "{{ item.name }}"
        policy_name:                   "{{ ontap_80_snapm_policy_premium }}"
        policy_type:                   "mirror_vault"
        snapmirror_label:
          - "5min"
          - "hourly"
          - "daily"
          - "weekly"
        keep:
          - 3
          - 10
          - 10
          - 4
      loop:
        "{{ svm_svms }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - svm_svms | length > 0
        - item.name is defined
        - item.name is regex('^sp-svm.*')

    - name: Create protection policy - Ultimate
      netapp.ontap.na_ontap_snapmirror_policy:
        state:                         present
        vserver:                       "{{ item.name }}"
        policy_name:                   "{{ ontap_80_snapm_policy_ultimate }}"
        policy_type:                   "mirror_vault"
        snapmirror_label:
          - "5min"
          - "hourly"
          - "daily"
          - "weekly"
        keep:
          - 3
          - 20
          - 14
          - 12
      loop:
        "{{ svm_svms }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - svm_svms | length > 0
        - item.name is defined
        - item.name is regex('^sp-svm.*')

  post_tasks:

- hosts:                               "primary_storage_clusters"
  name:                                "ONTAP-80-00 - Base Deployment - primary only"
  gather_facts:                        false
  vars_files:
    - ../../vars/{{ inventory_dir | split('/') | last }}/vars.yml
    - ../../vars/{{ inventory_dir | split('/') | last }}/vault.yml
  collections:
    - netapp.ontap
  module_defaults:
    group/netapp.ontap.netapp_ontap:
      hostname:                        "{{ ansible_host }}"
      username:                        "{{ ontap_admin_user }}"
      password:                        "{{ ontap_admin_password }}"
      https:                           true
      validate_certs:                  false
      use_rest:                        "always"

  pre_tasks:

  tasks:
    - name: Create snapshot policy - Standard
      netapp.ontap.na_ontap_snapshot_policy:
        state:                         present
        vserver:                       "{{ item.name }}"
        name:                          "{{ ontap_80_snap_policy_standard }}"
        schedule:                      
          - "5min"
          - "hourly"
          - "daily"
          - "weekly"
        prefix:
          - "5min"
          - "hourly"
          - "daily"
          - "weekly"
        snapmirror_label:
          - "5min"
          - "hourly"
          - "daily"
          - "weekly"
        count:
          - 3
          - 5
          - 2
          - 1
        enabled:                       True
      loop:
        "{{ svm_svms }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - svm_svms | length > 0
        - item.name is defined
        - item.name is regex('^sp-svm.*')

    - name: Create snapshot policy - Premium
      netapp.ontap.na_ontap_snapshot_policy:
        state:                         present
        vserver:                       "{{ item.name }}"
        name:                          "{{ ontap_80_snap_policy_premium }}"
        schedule:                      
          - "5min"
          - "hourly"
          - "daily"
          - "weekly"
        prefix:
          - "5min"
          - "hourly"
          - "daily"
          - "weekly"
        snapmirror_label:
          - "5min"
          - "hourly"
          - "daily"
          - "weekly"
        count:
          - 6
          - 12
          - 4
          - 1
        enabled:                       True
      loop:
        "{{ svm_svms }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - svm_svms | length > 0
        - item.name is defined
        - item.name is regex('^sp-svm.*')

    - name: Create snapshot policy - Ultimate
      netapp.ontap.na_ontap_snapshot_policy:
        state:                         present
        vserver:                       "{{ item.name }}"
        name:                          "{{ ontap_80_snap_policy_ultimate }}"
        schedule:                      
          - "5min"
          - "hourly"
          - "daily"
          - "weekly"
        prefix:
          - "5min"
          - "hourly"
          - "daily"
          - "weekly"
        snapmirror_label:
          - "5min"
          - "hourly"
          - "daily"
          - "weekly"
        count:
          - 12
          - 24
          - 7
          - 1
        enabled:                       True
      loop:
        "{{ svm_svms }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - svm_svms | length > 0
        - item.name is defined
        - item.name is regex('^sp-svm.*')

    - name: Create volumes
      netapp.ontap.na_ontap_volume:
        state:                         present
        name:                          "{{ item.1 }}"
        aggregate_name:                "{{ storage_aggregates[0].name }}"
        size:                          "{{ ontap_default_vol_size_gb }}"
        size_unit:                     gb
        space_guarantee:               none
        tiering_policy:                auto
        snapshot_policy:               "{{ ontap_80_snap_policy_standard }}"
        export_policy:                 "ro_{{ item.0 }}"
        junction_path:                 "/{{ item.1 }}"
        vserver:                       "{{ item.0 }}"
        volume_security_style:         "unix"
      loop:
        "{{ ontap_80_svms | product(ontap_80_volumes) | list }}"
  
    - name: Set default quota rule on volumes
      netapp.ontap.na_ontap_quotas:
        state:                         present
        vserver:                       "{{ item.0 }}"
        volume:                        "{{ item.1 }}"
        quota_target:                  ""
        type:                          tree
        set_quota_status:              True
      loop:
        "{{ ontap_80_svms | product(ontap_80_volumes) | list }}"

    - name: Create SVM Peerings
      netapp.ontap.na_ontap_vserver_peer:
        state:                         present
        vserver:                       "{{ item.name }}"
        peer_vserver:                  "{{ item.name }}-backup"
        peer_cluster:                  "{{ hostvars[groups['secondary_storage_clusters'][0]].cluster.name }}"
        applications:
          - "snapmirror"
        peer_options:
          hostname: "{{ hostvars[groups['secondary_storage_clusters'][0]].ansible_host }}"
      loop:
        "{{ svm_svms }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - svm_svms | length > 0
        - item.name is defined
        - item.name is regex('^sp-svm.*')

  post_tasks: