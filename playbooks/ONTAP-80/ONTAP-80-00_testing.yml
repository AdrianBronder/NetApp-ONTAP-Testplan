################################################################################
#
# Title:        ONTAP-80-00 - Base Deployment
# Author:       NetApp Inc. (badrian)
# Initial 
# Create Date:  2025-02-13
# Description:  Advanced - Self-Service
#               - Base Deployment
#
# URLs:         https://docs.netapp.com/us-en/ontap/index.html
#               https://galaxy.ansible.com/netapp/ontap
#
# Built-in help:
# ansible-doc netapp.ontap.<module_name>
# 
################################################################################

- hosts:                               "primary_storage_clusters"
  name:                                "ONTAP-80-00 - Base Deployment - primary only"
  gather_facts:                        false
  vars_files:
    - ../../vars/{{ inventory_dir | split('/') | last }}/vars.yml
    - ../../vars/{{ inventory_dir | split('/') | last }}/vault.yml
  collections:
    - netapp.ontap
  module_defaults:
    group/netapp.ontap.netapp_ontap:
      hostname:                        "{{ ansible_host }}"
      username:                        "{{ ontap_admin_user }}"
      password:                        "{{ ontap_admin_password }}"
      https:                           true
      validate_certs:                  false
      use_rest:                        "never"

  pre_tasks:

  tasks:
    - name: Create snapshot policy - Standard
      netapp.ontap.na_ontap_snapshot_policy:
        state:                         present
        vserver:                       "{{ item.name }}"
        name:                          "{{ ontap_80_snap_policy_standard }}"
        schedule: "5min"
        prefix: "5min"
        snapmirror_label: "5min"
        count: 3
        enabled:                       True
      loop:
        "{{ svm_svms }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - svm_svms | length > 0
        - item.name is defined
        - item.name is regex('^sp-svm.*')

    - name: Create snapshot policy - Standard 2
      netapp.ontap.na_ontap_snapshot_policy:
        state:                         present
        vserver:                       "{{ item.name }}"
        name:                          "{{ ontap_80_snap_policy_standard }}"
        schedule: "hourly"
        prefix: "hourly"
        snapmirror_label: "hourly"
        count: 5
        enabled:                       True
      loop:
        "{{ svm_svms }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - svm_svms | length > 0
        - item.name is defined
        - item.name is regex('^sp-svm.*')

    - name: Create snapshot policy - Premium
      netapp.ontap.na_ontap_snapshot_policy:
        state:                         present
        vserver:                       "{{ item.name }}"
        name:                          "{{ ontap_80_snap_policy_premium }}"
        schedule:                      
          - "5min"
          - "hourly"
          - "daily"
          - "weekly"
        prefix:
          - "5min"
          - "hourly"
          - "daily"
          - "weekly"
        snapmirror_label:
          - "5min"
          - "hourly"
          - "daily"
          - "weekly"
        count:
          - 6
          - 12
          - 4
          - 1
        enabled:                       True
      loop:
        "{{ svm_svms }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - svm_svms | length > 0
        - item.name is defined
        - item.name is regex('^sp-svm.*')

    - name: Create snapshot policy - Ultimate
      netapp.ontap.na_ontap_snapshot_policy:
        state:                         present
        vserver:                       "{{ item.name }}"
        name:                          "{{ ontap_80_snap_policy_ultimate }}"
        schedule:                      
          - "5min"
          - "hourly"
          - "daily"
          - "weekly"
        prefix:
          - "5min"
          - "hourly"
          - "daily"
          - "weekly"
        snapmirror_label:
          - "5min"
          - "hourly"
          - "daily"
          - "weekly"
        count:
          - 12
          - 24
          - 7
          - 1
        enabled:                       True
      loop:
        "{{ svm_svms }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - svm_svms | length > 0
        - item.name is defined
        - item.name is regex('^sp-svm.*')

    - name: Create volumes
      netapp.ontap.na_ontap_volume:
        state:                         present
        name:                          "{{ item.1 }}"
        aggregate_name:                "{{ storage_aggregates[0].name }}"
        size:                          "{{ ontap_default_vol_size_gb }}"
        size_unit:                     gb
        space_guarantee:               none
        tiering_policy:                auto
        snapshot_policy:               "{{ ontap_80_snap_policy_standard }}"
        export_policy:                 "ro_{{ item.0 }}"
        junction_path:                 "/{{ item.1 }}"
        vserver:                       "{{ item.0 }}"
        volume_security_style:         "unix"
      loop:
        "{{ ontap_80_svms | product(ontap_80_volumes) | list }}"
  
    - name: Set default quota rule on volumes
      netapp.ontap.na_ontap_quotas:
        state:                         present
        vserver:                       "{{ item.0 }}"
        volume:                        "{{ item.1 }}"
        quota_target:                  ""
        type:                          tree
        set_quota_status:              True
      loop:
        "{{ ontap_80_svms | product(ontap_80_volumes) | list }}"

    - name: Create SVM Peerings
      netapp.ontap.na_ontap_vserver_peer:
        state:                         present
        vserver:                       "{{ item.name }}"
        peer_vserver:                  "{{ item.name }}-backup"
        peer_cluster:                  "{{ hostvars[groups['secondary_storage_clusters'][0]].cluster.name }}"
        applications:
          - "snapmirror"
        peer_options:
          hostname: "{{ hostvars[groups['secondary_storage_clusters'][0]].ansible_host }}"
      loop:
        "{{ svm_svms }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - svm_svms | length > 0
        - item.name is defined
        - item.name is regex('^sp-svm.*')

  post_tasks: