################################################################################
#
# Title:        ONTAP-revert-15 - Cluster Peering
# Author:       NetApp Inc. (badrian)
# Initial 
# Create Date:  2023-08-17
# Description:  Revert all steps performed in test frame 15
# 
# URLs:         https://docs.netapp.com/us-en/ontap/index.html
#               https://galaxy.ansible.com/netapp/ontap
# 
# Built-in help:
# ansible-doc netapp.ontap.<module_name>
#
################################################################################

- hosts:                               "ontap"
  name:                                "ONTAP-revert-15 - Cluster Peering"
  gather_facts:                        false
  vars:
    input: &input
      hostname:                        "{{ ansible_host }}"
      username:                        "{{ ontap_admin_user }}"
      password:                        "{{ ontap_admin_password }}"
      https:                           true
      validate_certs:                  false
      use_rest:                        "always"
  vars_files:
    - ../../vars/{{ inventory_dir | split('/') | last }}/vars.yml
    - ../../vars/{{ inventory_dir | split('/') | last }}/vault.yml
  collections:
    - netapp.ontap

  tasks:
    - name: Remove cluster peerings
      netapp.ontap.na_ontap_cluster_peer:
        state:                         absent
        source_cluster_name:           "{{ hostvars['primary_storage_cluster'].cluster.name
                                           if hostvars['primary_storage_cluster'].cluster.name == cluster.name
                                           else hostvars['secondary_storage_cluster'].cluster.name }}"
        dest_cluster_name:             "{{ hostvars['secondary_storage_cluster'].cluster.name
                                           if hostvars['primary_storage_cluster'].cluster.name == cluster.name
                                           else hostvars['primary_storage_cluster'].cluster.name }}"
        peer_options:
          hostname:                    "{{ hostvars['secondary_storage_cluster'].ansible_host
                                           if hostvars['primary_storage_cluster'].cluster.name == cluster.name
                                           else hostvars['primary_storage_cluster'].ansible_host }}"
        <<: *input
      ignore_errors: true
  
    - name: Remove peering interfaces
      netapp.ontap.na_ontap_interface:
        state:                         absent
        interface_name:                "{{ item.name }}"
        ipspace:                       "{{ item.ipspace.name }}"
        <<: *input
      loop:
        "{{ network_ip_interfaces }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - network_ip_interfaces | length > 0
        - item.scope == "cluster"
        - item.service_policy.name == "default-intercluster"

    - name: Remove peering interface groups on storage cluster
      netapp.ontap.na_ontap_net_ifgrp:
        state:                         absent
        node:                          "{{ item.node.name }}"
        broadcast_domain:              "{{ item.broadcast_domain.name }}"
        ipspace:                       "{{ item.broadcast_domain.ipspace.name }}"
        ports:                         "{{ item.lag.member_ports | map(attribute='name') | flatten }}"
        <<: *input
      loop:
        "{{ network_ethernet_ports }}"
      loop_control:
        label: "{{ item.node.name }}:{{ item.name }}"
      when:
        - item.name is defined
        - item.broadcast_domain.ipspace.name is defined
        - item.broadcast_domain.ipspace.name != "Default"

    - name: Remove peering broadcast domain on storage cluster
      netapp.ontap.na_ontap_broadcast_domain:
        state:                         absent
        name:                          "{{ item.name }}"
        ipspace:                       "{{ item.ipspace.name }}"
        <<: *input
      loop:
        "{{ network_ethernet_broadcast_domains }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - item.name is defined
        - item.ipspace.name != "Default"

    - name: Remove peering IPspace
      netapp.ontap.na_ontap_ipspace:
        state:                         absent
        name:                          "{{ item.name }}"
        <<: *input
      loop:
        "{{ network_ipspaces }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - item.name is defined