################################################################################
#
# Title:        ONTAP-revert-00 - Return to Day0 - Linux
# Author:       NetApp Inc. (badrian)
# Initial 
# Create Date:  2023-08-17
# Description:  Revert all systems to initial state
#               - Linux
# 
# URLs:         https://docs.netapp.com/us-en/ontap/index.html
#               https://galaxy.ansible.com/netapp/ontap
# 
# Built-in help:
# ansible-doc netapp.ontap.<module_name>
#
################################################################################

- hosts:                          "{{ global_primary_test_cluster }}"
  name:                           "ONTAP-revert-00 - Return to Day0 - Linux - ONTAP (read)"
  gather_facts:                   false
  vars:
    input_read: &input_read
      hostname:                   "{{ ansible_host }}"
      username:                   "{{ ontap_admin_user }}"
      password:                   "{{ ontap_admin_password }}"
      https:                      true
      validate_certs:             false
      use_rest:                   "always"
  vars_files:
    - ../../vars/{{ inventory_dir | split('/') | last }}/vars.yml
    - ../../vars/{{ inventory_dir | split('/') | last }}/vault.yml
  collections:
    - netapp.ontap

  pre_tasks:

  tasks:
    - name: Get iSCSI target info from "{{ global_primary_san_svm }}" 
      netapp.ontap.na_ontap_rest_info:
        gather_subset:
          - "protocols/san/iscsi/services"
        fields:
          - "svm"
          - "target"
        parameters:
          svm.name:               "{{ global_primary_san_svm }}"
        use_python_keys:          true
        <<: *input_read
      register: iscsi_info

    - name: Get LUNs from "{{ global_primary_test_cluster }}"
      netapp.ontap.na_ontap_rest_info:
        gather_subset:
          - "storage/luns"
        fields:
          - "svm"
          - "location"
          - "serial_number"
        use_python_keys:          true
        <<: *input_read
      register: lun_info

    - name: Get NVMe subsystems from "{{ global_primary_test_cluster }}"
      netapp.ontap.na_ontap_rest_info:
        gather_subset:
          - "protocols/nvme/subsystems"
        use_python_keys:          true
        <<: *input_read
      register: nvme_subsys_info

    - name: Get all NVMe namespaces from "{{ global_primary_test_cluster }}"
      netapp.ontap.na_ontap_rest_info:
        gather_subset:
          - "storage/namespaces"
        fields:
          - "svm"
        use_python_keys:            true
        <<: *input_read
      register: nvme_ns_info

  post_tasks:

- hosts:              "linux"
  name:               "ONTAP-revert-00 - Return to Day0 - Linux"
  gather_facts:       true
  vars_files:
    - ../../vars/{{ inventory_dir | split('/') | last }}/vars.yml
    - ../../vars/{{ inventory_dir | split('/') | last }}/vault.yml
  collections:
    - ansible.posix

  tasks:
    - name: Unmount Namespaces
      ansible.posix.mount:
        state:                      "absent"
        path:                       "{{ linux_37_mount_dir }}/{{ item | split('/') | last }}"
      loop:
        "{{ ontap_37_lin_namespaces }}"

    - name: Remove default Namespace mount directory
      ansible.builtin.file:
        path:                       "{{ linux_37_mount_dir }}"
        state:                      "absent"

    - name: Read connected namespaces
      ansible.utils.cli_parse:
        command: "nvme list-subsys -o json"
        parser:
          name: ansible.utils.json
        set_fact: linux_ontap_subs

    - name: Disconnect NVMe namespaces
      ansible.builtin.command:
        cmd: "nvme disconnect --nqn={{ (linux_ontap_subs.Subsystems |
                                        selectattr('NQN', 'defined') |
                                        selectattr('NQN', 'search', ontap_37_lin_subsystem_name ) |
                                        first ).NQN }}"
      when:
        - linux_ontap_subs.Subsystems is defined
        - linux_ontap_subs.Subsystems |
          selectattr('NQN', 'defined') |
          selectattr('NQN', 'search', ontap_37_lin_subsystem_name ) |
          length > 0 

    - name: Unmount LUNs
      ansible.posix.mount:
        state:                      "absent"
        path:                       "{{ linux_35_mount_dir }}/{{ item | split('/') | last }}"
      loop:
        "{{ ontap_35_lin_luns }}"

    - name: Remove default LUN mount directory
      ansible.builtin.file:
        path:                       "{{ linux_35_mount_dir }}"
        state:                      "absent"

    - name: List iSCSI targets
      community.general.open_iscsi:
        show_nodes:               true
      register: iscsi_nodes

    - name: Remove iSCSI sessions and logout
      community.general.open_iscsi:
        show_nodes:               false
        discover:                 false
        login:                    false
        auto_portal_startup:      false
        auto_node_startup:        false
        portal:                   "{{ item.ip.address }}"
        target:                   "{{ (hostvars[global_primary_test_cluster].iscsi_info.ontap_info.protocols_san_iscsi_services.records |
                                       first ).target.name }}"
      loop_control:
        label: "{{ item.ip.address }}"
      loop:
        "{{ hostvars[global_primary_test_cluster].network_ip_interfaces |
            selectattr('svm.name', 'defined') |
            selectattr('svm.name', '==', global_primary_san_svm) |
            selectattr('service_policy.name', 'search', 'block') |
            list }}"
      when:
        - iscsi_nodes.nodes | length > 0

    - name: Remove iSCSI targets
      ansible.builtin.command:
        cmd: "iscsiadm -m node -o delete -T {{ item }}"
      loop:
        "{{ iscsi_nodes.nodes | unique }}"
      when:
        - iscsi_nodes.nodes | length > 0

    - name: Flush multipath devices
      ansible.builtin.command:
        cmd: "multipath -f {{ ontap_iscsi_vendor_id }}\
                           {{ (hostvars[global_primary_test_cluster].lun_info.ontap_info.storage_luns.records |
                              selectattr('name', 'defined') |
                              selectattr('name', '==', item ) |
                              first ).serial_hex }}"
      when:
        - hostvars[global_primary_test_cluster].lun_info.ontap_info.storage_luns.num_records|int > 0
        - (hostvars[global_primary_test_cluster].lun_info.ontap_info.storage_luns.records |
           selectattr('name', 'defined') |
           selectattr('name', '==', item ) |
           first ).serial_hex is defined
      loop_control:
        label: "{{ item }}"
      loop:
        "{{ ontap_35_lin_luns }}"

    - name: Unmount exports
      ansible.posix.mount:
        state:                    "absent"
        src:                      "{{ item.device }}"
        path:                     "{{ item.mount }}"
        # opts:                     "rw,sync,hard,vers=3"
        fstype:                   "nfs"
      loop:
        "{{ ansible_mounts | selectattr('device', 'search', 'ntap-svm*')}}"
  
    - name: Remove mount directories
      ansible.builtin.file:
        path:                     "{{ linux_default_mount_dir }}"
        state:                    "absent"
        mode:                     "0755"