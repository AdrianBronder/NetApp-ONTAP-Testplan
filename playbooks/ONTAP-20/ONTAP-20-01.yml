################################################################################
#
# Title:        ONTAP-20-01 - Storage Virtual Machines (SVMs)
# Author:       NetApp Inc. (badrian)
# Initial 
# Create Date:  2023-08-22
# Description:  Basic SVM Setup
#               - Storage Virtual Machines (SVMs)
#
# URLs:         https://docs.netapp.com/us-en/ontap/index.html
#               https://galaxy.ansible.com/netapp/ontap
#
# Built-in help:
# ansible-doc netapp.ontap.<module_name>
# 
################################################################################

- hosts:              "ontap"
  name:               "ONTAP-20-01 - Storage Virtual Machines (SVMs)"
  gather_facts:       false
  vars:
    input: &input
      hostname:                   "{{ ansible_host }}"
      username:                   "{{ ontap_admin_user }}"
      password:                   "{{ ontap_admin_password }}"
      https:                      true
      validate_certs:             false
      use_rest:                   "always"
  vars_files:
    - ../../vars/labondemand/vars.yml
    - ../../vars/labondemand/vault.yml
  collections:
    - netapp.ontap

  pre_tasks:

  tasks:
    - name: Create all SVMs for testing"
      netapp.ontap.na_ontap_svm:
        state:                      present
        name:                       "{{ item.name }}"
        services:
          cifs:
            allowed:                "{{ item.cifs.allowed | default(omit) }}"
          ndmp:
            allowed:                "{{ item.ndmp.allowed | default(omit) }}"
          nfs:
            allowed:                "{{ item.nfs.allowed | default(omit) }}"
          fcp:
            allowed:                "{{ item.fcp.allowed | default(omit) }}"
          iscsi:
            allowed:                "{{ item.iscsi.allowed | default(omit) }}"
          nvme:
            allowed:                "{{ item.nvme.allowed | default(omit) }}"
        <<: *input
      loop:
        "{{ svm_svms }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - svm_svms | length > 0
        - item.name is defined 
        - security_authentication_cluster_ad_proxy.svm.name is defined and
          security_authentication_cluster_ad_proxy.svm.name != item.name
  
    - name: Patch additional SVM parameters - auto_enable_analytics
      netapp.ontap.na_ontap_rest_cli:
        command:                    'vserver'
        verb:                       'PATCH'
        params: 
          vserver:                  "{{ item.name }}"
        body:
          auto_enable_analytics:    "{{ item.auto_enable_analytics }}"
        <<: *input
      loop:
        "{{ svm_svms }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - svm_svms | length > 0
        - item.name is defined
        - item.auto_enable_analytics is defined
        - security_authentication_cluster_ad_proxy.svm.name is defined and
          security_authentication_cluster_ad_proxy.svm.name != item.name
  
    - name: Patch additional SVM parameters - auto_enable_activity_tracking
      netapp.ontap.na_ontap_rest_cli:
        command:                    'vserver'
        verb:                       'PATCH'
        params: 
          vserver:                  "{{ item.name }}"
        body:
          auto_enable_activity_tracking: "{{ item.auto_enable_activity_tracking }}"
        <<: *input
      loop:
        "{{ svm_svms }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - svm_svms | length > 0
        - item.name is defined
        - item.auto_enable_activity_tracking is defined
        - security_authentication_cluster_ad_proxy.svm.name is defined and
          security_authentication_cluster_ad_proxy.svm.name != item.name
  
    - name: Enable iSCSI on SAN SVM(s)
      netapp.ontap.na_ontap_iscsi:
        state:                      present
        service_state:              "started"
        vserver:                    "{{ item.svm.name }}"
        <<: *input
      loop:
        "{{ protocols_san_iscsi_services }}"
      loop_control:
        label: "{{ item.svm.name }}"
      when:
        - protocols_san_iscsi_services | length > 0
        - item.svm.name is defined 
        - security_authentication_cluster_ad_proxy.svm.name is defined and
          security_authentication_cluster_ad_proxy.svm.name != item.svm.name
  
    - name: Enable NVMe on SAN SVM(s)
      netapp.ontap.na_ontap_nvme:
        state:                      present
        status_admin:               true
        vserver:                    "{{ item.svm.name }}"
        <<: *input
      loop:
        "{{ protocols_nvme_services }}"
      loop_control:
        label: "{{ item.svm.name }}"
      when:
        - protocols_nvme_services | length > 0
        - item.svm.name is defined 
        - security_authentication_cluster_ad_proxy.svm.name is defined and
          security_authentication_cluster_ad_proxy.svm.name != item.svm.name

    - name: Create read-only export policy for NFS
      netapp.ontap.na_ontap_export_policy:
        state:                      present
        name:                       "ro_{{ item.svm.name }}"
        vserver:                    "{{ item.svm.name }}"
        <<: *input
      when:
        - protocols_nfs_services | length > 0
        - item.svm.name is defined 
        - security_authentication_cluster_ad_proxy.svm.name is defined and
          security_authentication_cluster_ad_proxy.svm.name != item.svm.name
  
    - name: Create read-only export policy rules for SVM root volume for NFS
      na_ontap_export_policy_rule:
        state:                      present
        name:                       "ro_{{ global_primary_nas_svm }}"
        vserver:                    "{{ global_primary_nas_svm }}"
        client_match:               "{{ groups['linux'] | map('extract', hostvars, ['ansible_host']) }}"
        ro_rule:                    "any"
        rw_rule:                    "none"
        protocol:                   "nfs"
        super_user_security:        "none"
        allow_suid:                 false
        <<: *input
      when:
        - protocols_nfs_services | length > 0
        - item.svm.name is defined 
        - security_authentication_cluster_ad_proxy.svm.name is defined and
          security_authentication_cluster_ad_proxy.svm.name != item.svm.name

    - name: Apply read-only export policy to SVM's root volume for NFS
      netapp.ontap.na_ontap_volume:
        state:                      present
        name:                       "{{ global_primary_nas_svm.replace('-','_') }}_root"
        vserver:                    "{{ global_primary_nas_svm }}"
        export_policy:              "ro_{{ global_primary_nas_svm }}"
        <<: *input
      when:
        - protocols_nfs_services | length > 0
        - item.svm.name is defined 
        - security_authentication_cluster_ad_proxy.svm.name is defined and
          security_authentication_cluster_ad_proxy.svm.name != item.svm.name
  
  post_tasks: