################################################################################
#
# Title:        ONTAP-82-01 - Filesystems for Tenants
# Author:       NetApp Inc. (badrian)
# Initial 
# Create Date:  2024-11-04
# Description:  Anti-Ransomware
#               - Filesystems for Tenants
#
# URLs:         https://docs.netapp.com/us-en/ontap/index.html
#               https://galaxy.ansible.com/netapp/ontap
#
# Built-in help:
# ansible-doc netapp.ontap.<module_name>
# 
################################################################################

- hosts:                               "primary_storage_clusters"
  name:                                "ONTAP-82-01 - Filesystems for Tenants - ONTAP"
  gather_facts:                        false
  vars:
    input: &input
      hostname:                        "{{ ansible_host }}"
      username:                        "{{ ontap_admin_user }}"
      password:                        "{{ ontap_admin_password }}"
      https:                           true
      validate_certs:                  false
      use_rest:                        "always"
  vars_files:
    - ../../vars/{{ inventory_dir | split('/') | last }}/vars.yml
    - ../../vars/{{ inventory_dir | split('/') | last }}/vault.yml
  collections:
    - netapp.ontap

  pre_tasks:

  tasks:    
    - name: Create read-write export policy
      netapp.ontap.na_ontap_export_policy:
        state:                         present
        name:                          "{{ ontap_82_policy_name }}"
        vserver:                       "{{ item }}"
        <<: *input
      loop:
        "{{ ontap_80_svms }}"
  
    - name: Create read-write export policy rules for data volumes
      netapp.ontap.na_ontap_export_policy_rule:
        state:                         present
        name:                          "{{ ontap_82_policy_name }}"
        vserver:                       "{{ item }}"
        client_match:                  "{{ groups['linux'] | map('extract', hostvars, ['ansible_host']) }}"
        ro_rule:                       "any"
        rw_rule:                       "any"
        protocol:                      "nfs"
        super_user_security:           "any"
        allow_suid:                    true
        <<: *input
      loop:
        "{{ ontap_80_svms }}"

    - name: Create volumes
      netapp.ontap.na_ontap_volume:
        state:                         present
        name:                          "{{ item.1 }}"
        aggregate_name:                "{{ storage_aggregates[0].name }}"
        size:                          "{{ ontap_default_vol_size_gb }}"
        size_unit:                     "gb"
        space_guarantee:               "none"
        tiering_policy:                "auto"
        export_policy:                 "ro_{{ item.0 }}"
        junction_path:                 "/{{ item.1 }}"
        vserver:                       "{{ item.0 }}"
        volume_security_style:         "unix"
        <<: *input
      loop:
        "{{ ontap_80_svms | product(ontap_80_volumes) | list }}"
  
    - name: Create qtrees
      netapp.ontap.na_ontap_qtree:
        state:                         present
        name:                          "{{ item.2 }}"
        flexvol_name:                  "{{ item.1 }}"
        export_policy:                 "{{ ontap_82_policy_name }}"
        security_style:                "unix"
        unix_permissions:              0777
        vserver:                       "{{ item.0 }}"
        <<: *input
      loop:
        "{{ ontap_80_svms | product(ontap_80_volumes, ontap_82_qtrees) | list }}"

    - name: Create Qtree shares
      netapp.ontap.na_ontap_cifs:
        state:                         present
        name:                          "{{ item.1 }}_{{ item.2 }}"
        path:                          "/{{ item.1 }}/{{ item.2 }}"
        vserver:                       "{{ item.0 }}"
        browsable:                     true
        oplocks:                       true
        show_snapshot:                 true
        <<: *input
      loop:
        "{{ ontap_80_svms | product(ontap_80_volumes, ontap_82_qtrees) | list }}"

    - name: Create volume shares
      netapp.ontap.na_ontap_cifs:
        state:                         present
        name:                          "{{ item.1 }}"
        path:                          "/{{ item.1 }}"
        vserver:                       "{{ item.0 }}"
        browsable:                     true
        oplocks:                       true
        show_snapshot:                 true
        <<: *input
      loop:
        "{{ ontap_80_svms | product(ontap_80_volumes) | list }}"


    - name: Remove "Full Control" for "Everyone"
      netapp.ontap.na_ontap_cifs_acl:
        state:                         present
        share_name:                    "{{ item.1 }}_{{ item.2 }}"
        vserver:                       "{{ item.0 }}"
        user_or_group:                 "Everyone"
        permission:                    "read"
        <<: *input
      loop:
        "{{ ontap_80_svms | product(ontap_80_volumes, ontap_82_qtrees) | list }}"

- hosts:                               "linux"
  name:                                "ONTAP-82-01 - Filesystems for Tenants - Linux"
  gather_facts:                        false
  vars_files:
    - ../../vars/{{ inventory_dir | split('/') | last }}/vars.yml
    - ../../vars/{{ inventory_dir | split('/') | last }}/vault.yml
  collections:
    - ansible.posix
    - community.general

  pre_tasks:

  tasks:
    - name: Ensure stale mounts are removed before proceding (in case a mount exists)
      ansible.posix.mount:
        state:                         "absent"
        src:                           "{{ item.0 }}.{{ all_default_dns_domain }}:/\
                                        {{ item.1 }}/{{ item.2 }}"
        path:                          "{{ linux_82_mount_dir }}/{{ item.0 }}/{{ item.1 }}_{{ item.2 }}"
#        opts:                          "rw,sync,hard,vers=3"
        fstype:                        "nfs"
      loop:
        "{{ ontap_80_svms | product(ontap_80_volumes, ontap_82_qtrees) | list }}"
  
    - name: Create mount directories
      ansible.builtin.file:
        path:                          "{{ linux_82_mount_dir }}/{{ item.0 }}/{{ item.1 }}_{{ item.2 }}"
        state:                         "directory"
        mode:                          "0755"
      loop:
        "{{ ontap_80_svms | product(ontap_80_volumes, ontap_82_qtrees) | list }}"
  
    - name: Mount NFS export on Linux host
      ansible.posix.mount:
        state:                         "mounted"
        src:                           "{{ item.0 }}.{{ all_default_dns_domain }}:/\
                                        {{ item.1 }}/{{ item.2 }}"
        path:                          "{{ linux_82_mount_dir }}/{{ item.0 }}/{{ item.1 }}_{{ item.2 }}"
#        opts:                          "rw,sync,hard,vers=3"
        fstype:                        "nfs"
      loop:
        "{{ ontap_80_svms | product(ontap_80_volumes, ontap_82_qtrees) | list }}"

  post_tasks: