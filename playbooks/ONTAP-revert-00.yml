################################################################################
#
# Title:        ONTAP-revert-00.yml
# Author:       NetApp Inc. (badrian)
# Initial 
# Create Date:  2023-08-17
# Description:  Revert all systems to initial state
#               - Cluster is configured and reachable via cluster management
#                 interface
# 
# URLs:         https://docs.netapp.com/us-en/ontap/index.html
#               https://galaxy.ansible.com/netapp/ontap
# 
# Built-in help:
# ansible-doc netapp.ontap.<module_name>
#
################################################################################

- hosts:              "ontap"
  name:               "ONTAP-revert-00 - Return to Day0"
  gather_facts:       false
  vars:
    input: &input
      hostname:       "{{ ansible_host }}"
      username:       "{{ ontap_admin_user }}"
      password:       "{{ ontap_admin_password }}"
      https:          true
      validate_certs: false
      use_rest:       "always"
  vars_files:
    - ../vars/labondemand.yml
  collections:
    - netapp.ontap

  tasks:
  - name: Get all non-root volumes from clusters
    netapp.ontap.na_ontap_rest_info:
      gather_subset:
        - "storage/volumes"
      fields:
        - "svm"
      parameters:
        is_svm_root:              false
      use_python_keys:            true
      <<: *input
    register: vol_info

  - name: Delete all volumes from clusters
    netapp.ontap.na_ontap_volume:
      state:                      absent
      name:                       "{{ item.name }}"
      vserver:                    "{{ item.svm.name }}" 
      wait_for_completion:        true
      <<: *input
    when:
      - vol_info.ontap_info.storage_volumes.num_records|int > 0
      - item.name is defined
    loop:
      "{{ vol_info.ontap_info.storage_volumes.records }}"

  - name: Get all SVM CIFS servers
    netapp.ontap.na_ontap_rest_info:
      gather_subset:
        - "protocols/cifs/services"
      fields:
        - "*"
      use_python_keys:            true
      <<: *input
    register: cifs_service_info

  - name: Delete all SVM CIFS servers
    netapp.ontap.na_ontap_cifs_server:
      state:                      absent
      name:                       "{{ item.name }}"                  
      vserver:                    "{{ item.svm.name }}"
      domain:                     "{{ item.ad_domain.fqdn }}"
      ou:                         "{{ item.ad_domain.organizational_unit }}"
      admin_user_name:            "{{ testenv_ad_join_user }}"
      admin_password:             "{{ testenv_ad_join_password }}"
      <<: *input
    loop:
      "{{ cifs_service_info.ontap_info.protocols_cifs_services.records }}"
    loop_control:
      label: "{{ item.svm.name }} - {{ item.name }}"
    when:
    - cifs_service_info.ontap_info.protocols_cifs_services.num_records|int > 0
    - item.name is defined

  - name: Get all SVM interfaces from clusters
    netapp.ontap.na_ontap_rest_info:
      gather_subset:
      - "network/ip/interfaces"
      fields:
        - "svm"
        - "scope"
        - "service_policy"
      parameters:
        scope:                    "svm"
      use_python_keys:            true
      <<: *input
    register: svm_ip_int_info

  - name: Delete all SVM interfaces from clusters
    netapp.ontap.na_ontap_interface:
      state:                      absent
      interface_name:             "{{ item.name }}"
      vserver:                    "{{ item.svm.name }}"
      <<: *input
    loop:
      "{{ svm_ip_int_info.ontap_info.network_ip_interfaces.records }}"
    loop_control:
      label: "{{ item.svm.name }} - {{ item.name }}"
    when:
      - svm_ip_int_info.ontap_info.network_ip_interfaces.num_records|int > 0
      - item.name is defined
      - item.scope == "svm"

  - name: Get all intercluster interfaces from clusters
    netapp.ontap.na_ontap_rest_info:
      gather_subset:
      - "network/ip/interfaces"
      fields:
        - "svm"
        - "scope"
        - "service_policy"
      parameters:
        scope:                    "cluster"
        service_policy.name:      "default-intercluster"
      use_python_keys:            true
      <<: *input
    register: cluster_ip_int_info

  - name: Delete intercluster interfaces from clusters
    netapp.ontap.na_ontap_interface:
      state:                      absent
      interface_name:             "{{ item.name }}"
      hostname:                   "{{ ansible_host }}"
      <<: *input
    loop:
      "{{ cluster_ip_int_info.ontap_info.network_ip_interfaces.records }}"
    loop_control:
      label: "{{ item.name }}"
    when:
      - cluster_ip_int_info.ontap_info.network_ip_interfaces.num_records|int > 0
      - item.name is defined
      - item.scope == "cluster"
      - item.service_policy.name == "default-intercluster"

  - name: Get all SVMs
    netapp.ontap.na_ontap_rest_info:
      gather_subset:
        - "svm/svms"
      use_python_keys:            true
      <<: *input
    register: svm_info

  - name: Delete all SVMs
    netapp.ontap.na_ontap_svm:
      state:                      absent
      name:                       "{{ item.name }}"
      <<: *input
    loop:
      "{{ svm_info.ontap_info.svm_svms.records }}"
    loop_control:
      label: "{{ item.name }}"
    when:
      - svm_info.ontap_info.svm_svms.num_records|int > 0
      - item.name is defined

  - name: Get all users
    netapp.ontap.na_ontap_rest_info:
      gather_subset:
        - "security/accounts"
      fields:
        - "scope"
      use_python_keys:            true
      <<: *input
    register: accounts_info

  - name: Remove all additional users from cluster
    netapp.ontap.na_ontap_user:
      state:                      present
      name:                       "{{ item.name }}"
      <<: *input
    loop:
      "{{ accounts_info.ontap_info.security_accounts.records }}"
    loop_control:
      label: "{{ item.name }}"
    when:
      - accounts_info.ontap_info.security_accounts.num_records|int > 0
      - item.name is defined
      - item.name not in ["admin", "autosupport"]
      - item.scope == "cluster"

# by default, ONTAP does only return data aggregates via REST API
  - name: Get all non-root aggregates
    netapp.ontap.na_ontap_rest_info:
      gather_subset:
        - "storage/aggregates"
      use_python_keys:            true
      <<: *input
    register: aggr_info

  - name: Remove all non-root aggregates from clusters
    netapp.ontap.na_ontap_aggregate:
      state:                      absent
      name:                       "{{ item.name }}"
      <<: *input
    when:
      - aggr_info.ontap_info.storage_aggregates.num_records|int > 0
      - item.name is defined
    loop:
      "{{ aggr_info.ontap_info.storage_aggregates.records }}"

  - name: Remove DNS config from cluster
    netapp.ontap.na_ontap_dns:
      state:                      absent
      vserver:                    "{{ inventory_hostname }}"
      use_rest:                   "never"
      <<: *input

  - name: Get all NTP servers from cluster
    netapp.ontap.na_ontap_rest_info:
      gather_subset:
        - "cluster/ntp/servers"
      use_python_keys:            true
      <<: *input
    register: ntp_servers_info

  - name: Remove NTP servers from cluster
    netapp.ontap.na_ontap_ntp:
      state:                      absent
      server_name:                "{{ item.server }}"
      <<: *input
    when:
      - ntp_servers_info.ontap_info.cluster_ntp_servers.num_records|int > 0
      - item.server is defined
    loop:
      "{{ ntp_servers_info.ontap_info.cluster_ntp_servers.records }}"

  - name: Reset timezone on storage cluster to Etc/UTC
    netapp.ontap.na_ontap_cluster:
      state:                      present
      timezone:
        name:                     "Etc/UTC"
      <<: *input

  - name: Remove onboard key manager configuration
    netapp.ontap.na_ontap_security_key_manager:
      state:                      absent
      <<: *input

  - name: Get interface groups and VLANs from cluster
    netapp.ontap.na_ontap_rest_info:
      gather_subset:
        - "network/ethernet/ports"
      fields:
        - "*"
      parameters:
        type:                     "lag|vlan"
      use_python_keys:            true
      <<: *input
    register: ifgrp_info

  - name: Remove VLANs from cluster
    netapp.ontap.na_ontap_net_vlan:
      state:                      absent
      node:                       "{{ item.vlan.base_port.node.name }}"
      parent_interface:           "{{ item.vlan.base_port.name }}"
      vlanid:                     "{{ item.vlan.tag }}"
      <<: *input
    loop:
      "{{ ifgrp_info.ontap_info.network_ethernet_ports.records }}"
    loop_control:
      label: "{{ item.node.name }}:{{ item.name }}"
    when:
      - ifgrp_info.ontap_info.network_ethernet_ports.num_records|int > 0
      - item.type == "vlan"
      - item.name is defined

  - name: Remove interface groups from cluster
    netapp.ontap.na_ontap_net_ifgrp:
      state:                      absent
      node:                       "{{ item.node.name }}"
      ports:                      "{{ item.lag.member_ports | map(attribute='name') | flatten }}"
      <<: *input
    loop:
      "{{ ifgrp_info.ontap_info.network_ethernet_ports.records }}"
    loop_control:
      label: "{{ item.node.name }}:{{ item.name }}"
    when:
      - ifgrp_info.ontap_info.network_ethernet_ports.num_records|int > 0
      - item.type == "lag"
      - item.name is defined

  - name: Get broadcast domains from cluster
    netapp.ontap.na_ontap_rest_info:
      gather_subset:
        - "network/ethernet/broadcast-domains"
      fields:
        - "ipspace"
      use_python_keys:            true
      <<: *input
    register: bc_domain_info

  - name: Remove broadcast domains from cluster
    netapp.ontap.na_ontap_broadcast_domain:
      state:                      absent
      name:                       "{{ item.name }}"
      ipspace:                    "{{ item.ipspace.name }}"
      <<: *input
    loop:
      "{{ bc_domain_info.ontap_info.network_ethernet_broadcast_domains.records }}"
    loop_control:
      label: "{{ item.name }} | IPspace: {{ item.ipspace.name }}"
    when:
      - bc_domain_info.ontap_info.network_ethernet_broadcast_domains.num_records|int > 0
      - item.name is defined
      - not (item.ipspace.name == "Default" and item.name == "Default")
      - not (item.ipspace.name == "Cluster" and item.name == "Cluster")

  - name: Reset banner and message of the day on cluster
    netapp.ontap.na_ontap_login_messages:
      banner:                     ""
      motd_message:               ""
      show_cluster_motd:          false
      <<: *input