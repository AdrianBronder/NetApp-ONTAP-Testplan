################################################################################
#
# Title:        ONTAP-revert-00.yml
# Author:       NetApp Inc. (badrian)
# Initial 
# Create Date:  2023-08-17
# Description:  Revert all systems to initial state
#               - Clusters are configured and reachable via cluster management
#                 interface
# 
# URLs:         https://docs.netapp.com/us-en/ontap/index.html
#               https://galaxy.ansible.com/netapp/ontap
# 
# Built-in help:
# ansible-doc netapp.ontap.<module_name>
#
################################################################################

- hosts:                          "ontap"
  name:                           "ONTAP-revert-00 - Return to Day0 - ONTAP"
  gather_facts:                   false
  vars:            
    input: &input            
      hostname:                   "{{ ansible_host }}"
      username:                   "{{ ontap_admin_user }}"
      password:                   "{{ ontap_admin_password }}"
      https:                      true
      validate_certs:             false
      use_rest:                   "always"
  vars_files:
    - ../vars/labondemand/vars.yml
    - ../vars/labondemand/vault.yml
  collections:
    - netapp.ontap

  tasks:
    - name: Get all NVMe subsystems from clusters
      netapp.ontap.na_ontap_rest_info:
        gather_subset:
          - "protocols/nvme/subsystems"
        use_python_keys:            true
        <<: *input
      register: nvme_subsys_info

    - name: Remove all subsystems from clusters
      netapp.ontap.na_ontap_nvme_subsystem:
        state:                    absent
        vserver:                  "{{ item.svm.name }}"
        subsystem:                "{{ item.name }}"
        skip_mapped_check:        true
        skip_host_check:          true
        <<: *input
      when:
        - nvme_subsys_info.ontap_info.protocols_nvme_subsystems.num_records|int > 0
        - item.name is defined
      loop:
        "{{ nvme_subsys_info.ontap_info.protocols_nvme_subsystems.records }}"

    - name: Get all NVMe namespaces from clusters
      netapp.ontap.na_ontap_rest_info:
        gather_subset:
          - "storage/namespaces"
        fields:
          - "svm"
        use_python_keys:            true
        <<: *input
      register: nvme_ns_info

    - name: Remove all namespaces from clusters
      netapp.ontap.na_ontap_nvme_namespace:
        state:                    absent
        vserver:                  "{{ global_primary_san_svm }}"
        path:                     "{{ item }}"
        <<: *input
      when:
        - nvme_ns_info.ontap_info.storage_namespaces.num_records|int > 0
        - item.name is defined
      loop:
        "{{ nvme_ns_info.ontap_info.storage_namespaces.records }}"

    - name: Get all LUN mappings from clusters
      netapp.ontap.na_ontap_rest_info:
        gather_subset:
          - "protocols/san/lun-maps"
        use_python_keys:            true
        <<: *input
      register: lun_map_info

    - name: Remove all LUN mappings from clusters
      netapp.ontap.na_ontap_lun_map:
        state:                    absent
        vserver:                  "{{ item.svm.name }}"
        initiator_group_name:     "{{ item.igroup.name }}"
        path:                     "{{ item.lun.name }}"
        <<: *input
      when:
        - lun_map_info.ontap_info.protocols_san_lun_maps.num_records|int > 0
        - item.svm.name is defined
      loop:
        "{{ lun_map_info.ontap_info.protocols_san_lun_maps.records }}"

    - name: Get all LUNs from clusters
      netapp.ontap.na_ontap_rest_info:
        gather_subset:
          - "storage/luns"
        fields:
         - "svm"
        use_python_keys:          true
        <<: *input
      register: lun_info

    - name: Remove all LUNs from clusters
      netapp.ontap.na_ontap_lun:
        state:                    absent
        vserver:                  "{{ item.svm.name }}"
        name:                     "{{ item.name.split('/')[-1] }}"
        flexvol_name:             "{{ item.name.split('/')[-2] }}"
        <<: *input
      when:
        - lun_info.ontap_info.storage_luns.num_records|int > 0
        - item.name is defined
      loop:
        "{{ lun_info.ontap_info.storage_luns.records }}"

    - name: Get all iGroups from clusters
      netapp.ontap.na_ontap_rest_info:
        gather_subset:
          - "protocols/san/igroups"
        use_python_keys:          true
        <<: *input
      register: igroup_info

    - name: Remove all iGroups from clusters
      netapp.ontap.na_ontap_igroup:
        state:                    absent
        vserver:                  "{{ item.svm.name }}"
        name:                     "{{ item.name }}"
        <<: *input
      when:
        - igroup_info.ontap_info.protocols_san_igroups.num_records|int > 0
        - item.name is defined
      loop:
        "{{ igroup_info.ontap_info.protocols_san_igroups.records }}"

    - name: Get all non-root volumes from clusters
      netapp.ontap.na_ontap_rest_info:
        gather_subset:
          - "storage/volumes"
        fields:
          - "svm"
        parameters:
          is_svm_root:            false
        use_python_keys:          true
        <<: *input
      register: vol_info
  
    - name: Delete all volumes from clusters
      netapp.ontap.na_ontap_volume:
        state:                    absent
        name:                     "{{ item.name }}"
        vserver:                  "{{ item.svm.name }}" 
        wait_for_completion:      true
        <<: *input
      when:
        - vol_info.ontap_info.storage_volumes.num_records|int > 0
        - item.name is defined
      loop:
        "{{ vol_info.ontap_info.storage_volumes.records }}"
  
    - name: Get all SVM CIFS servers
      netapp.ontap.na_ontap_rest_info:
        gather_subset:
          - "protocols/cifs/services"
        fields:
          - "*"
        use_python_keys:          true
        <<: *input
      register: cifs_service_info
  
    - name: Delete all SVM CIFS servers
      netapp.ontap.na_ontap_cifs_server:
        state:                    absent
        name:                     "{{ item.name }}"                  
        vserver:                  "{{ item.svm.name }}"
        domain:                   "{{ item.ad_domain.fqdn }}"
        ou:                       "{{ item.ad_domain.organizational_unit }}"
        admin_user_name:          "{{ all_ad_join_user }}"
        admin_password:           "{{ all_ad_join_password }}"
        <<: *input
      loop:
        "{{ cifs_service_info.ontap_info.protocols_cifs_services.records }}"
      loop_control:
        label: "{{ item.svm.name }} - {{ item.name }}"
      when:
      - cifs_service_info.ontap_info.protocols_cifs_services.num_records|int > 0
      - item.name is defined
  
    - name: Get all SVM interfaces from clusters
      netapp.ontap.na_ontap_rest_info:
        gather_subset:
        - "network/ip/interfaces"
        fields:
          - "svm"
          - "scope"
          - "service_policy"
        parameters:
          scope:                  "svm"
        use_python_keys:          true
        <<: *input
      register: svm_ip_int_info
  
    - name: Delete all SVM interfaces from clusters
      netapp.ontap.na_ontap_interface:
        state:                    absent
        interface_name:           "{{ item.name }}"
        vserver:                  "{{ item.svm.name }}"
        <<: *input
      loop:
        "{{ svm_ip_int_info.ontap_info.network_ip_interfaces.records }}"
      loop_control:
        label: "{{ item.svm.name }} - {{ item.name }}"
      when:
        - svm_ip_int_info.ontap_info.network_ip_interfaces.num_records|int > 0
        - item.name is defined
        - item.scope == "svm"
  
    - name: Get all intercluster interfaces from clusters
      netapp.ontap.na_ontap_rest_info:
        gather_subset:
        - "network/ip/interfaces"
        fields:
          - "svm"
          - "scope"
          - "service_policy"
        parameters:
          scope:                  "cluster"
          service_policy.name:    "default-intercluster"
        use_python_keys:          true
        <<: *input
      register: cluster_ip_int_info
  
    - name: Delete intercluster interfaces from clusters
      netapp.ontap.na_ontap_interface:
        state:                    absent
        interface_name:           "{{ item.name }}"
        hostname:                 "{{ ansible_host }}"
        <<: *input
      loop:
        "{{ cluster_ip_int_info.ontap_info.network_ip_interfaces.records }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - cluster_ip_int_info.ontap_info.network_ip_interfaces.num_records|int > 0
        - item.name is defined
        - item.scope == "cluster"
        - item.service_policy.name == "default-intercluster"
  
    - name: Get all SVMs
      netapp.ontap.na_ontap_rest_info:
        gather_subset:
          - "svm/svms"
        use_python_keys:          true
        <<: *input
      register: svm_info
  
    - name: Delete all SVMs
      netapp.ontap.na_ontap_svm:
        state:                    absent
        name:                     "{{ item.name }}"
        <<: *input
      loop:
        "{{ svm_info.ontap_info.svm_svms.records }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - svm_info.ontap_info.svm_svms.num_records|int > 0
        - item.name is defined
  
    - name: Get all users
      netapp.ontap.na_ontap_rest_info:
        gather_subset:
          - "security/accounts"
        fields:
          - "scope"
        use_python_keys:          true
        <<: *input
      register: accounts_info
  
    - name: Remove all additional users from cluster
      netapp.ontap.na_ontap_user:
        state:                    absent
        name:                     "{{ item.name }}"
        <<: *input
      loop:
        "{{ accounts_info.ontap_info.security_accounts.records }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - accounts_info.ontap_info.security_accounts.num_records|int > 0
        - item.name is defined
        - item.name not in ["admin", "autosupport"]
        - item.scope == "cluster"
  
# by default, ONTAP does only return data aggregates via REST API
    - name: Get all non-root aggregates
      netapp.ontap.na_ontap_rest_info:
        gather_subset:
          - "storage/aggregates"
        use_python_keys:          true
        <<: *input
      register: aggr_info
  
    - name: Remove all non-root aggregates from clusters
      netapp.ontap.na_ontap_aggregate:
        state:                    absent
        name:                     "{{ item.name }}"
        <<: *input
      when:
        - aggr_info.ontap_info.storage_aggregates.num_records|int > 0
        - item.name is defined
      loop:
        "{{ aggr_info.ontap_info.storage_aggregates.records }}"
  
    - name: Remove DNS config from cluster
      netapp.ontap.na_ontap_dns:
        state:                    absent
        vserver:                  "{{ inventory_hostname }}"
        use_rest:                 "never"
        <<: *input
  
    - name: Get all NTP servers from cluster
      netapp.ontap.na_ontap_rest_info:
        gather_subset:
          - "cluster/ntp/servers"
        use_python_keys:          true
        <<: *input
      register: ntp_servers_info
  
    - name: Remove NTP servers from cluster
      netapp.ontap.na_ontap_ntp:
        state:                    absent
        server_name:              "{{ item.server }}"
        <<: *input
      when:
        - ntp_servers_info.ontap_info.cluster_ntp_servers.num_records|int > 0
        - item.server is defined
      loop:
        "{{ ntp_servers_info.ontap_info.cluster_ntp_servers.records }}"
  
    - name: Reset timezone on storage cluster to Etc/UTC
      netapp.ontap.na_ontap_cluster:
        state:                    present
        timezone:
          name:                   "Etc/UTC"
        <<: *input
  
    - name: Remove onboard key manager configuration
      netapp.ontap.na_ontap_security_key_manager:
        state:                    absent
        <<: *input
  
    - name: Get interface groups and VLANs from cluster
      netapp.ontap.na_ontap_rest_info:
        gather_subset:
          - "network/ethernet/ports"
        fields:
          - "*"
        parameters:
          type:                   "lag|vlan"
        use_python_keys:          true
        <<: *input
      register: ifgrp_info
  
    - name: Remove VLANs from cluster
      netapp.ontap.na_ontap_net_vlan:
        state:                    absent
        node:                     "{{ item.vlan.base_port.node.name }}"
        parent_interface:         "{{ item.vlan.base_port.name }}"
        vlanid:                   "{{ item.vlan.tag }}"
        <<: *input
      loop:
        "{{ ifgrp_info.ontap_info.network_ethernet_ports.records }}"
      loop_control:
        label: "{{ item.node.name }}:{{ item.name }}"
      when:
        - ifgrp_info.ontap_info.network_ethernet_ports.num_records|int > 0
        - item.type == "vlan"
        - item.name is defined
  
    - name: Remove interface groups from cluster
      netapp.ontap.na_ontap_net_ifgrp:
        state:                    absent
        node:                     "{{ item.node.name }}"
        ports:                    "{{ item.lag.member_ports | map(attribute='name') | flatten }}"
        <<: *input
      loop:
        "{{ ifgrp_info.ontap_info.network_ethernet_ports.records }}"
      loop_control:
        label: "{{ item.node.name }}:{{ item.name }}"
      when:
        - ifgrp_info.ontap_info.network_ethernet_ports.num_records|int > 0
        - item.type == "lag"
        - item.name is defined
  
    - name: Get broadcast domains from cluster
      netapp.ontap.na_ontap_rest_info:
        gather_subset:
          - "network/ethernet/broadcast-domains"
        fields:
          - "ipspace"
        use_python_keys:          true
        <<: *input
      register: bc_domain_info
  
    - name: Remove broadcast domains from cluster
      netapp.ontap.na_ontap_broadcast_domain:
        state:                    absent
        name:                     "{{ item.name }}"
        ipspace:                  "{{ item.ipspace.name }}"
        <<: *input
      loop:
        "{{ bc_domain_info.ontap_info.network_ethernet_broadcast_domains.records }}"
      loop_control:
        label: "{{ item.name }} | IPspace: {{ item.ipspace.name }}"
      when:
        - bc_domain_info.ontap_info.network_ethernet_broadcast_domains.num_records|int > 0
        - item.name is defined
        - not (item.ipspace.name == "Default" and item.name == "Default")
        - not (item.ipspace.name == "Cluster" and item.name == "Cluster")
  
    - name: Reset banner and message of the day on cluster
      netapp.ontap.na_ontap_login_messages:
        banner:                   ""
        motd_message:             ""
        show_cluster_motd:        false
        <<: *input