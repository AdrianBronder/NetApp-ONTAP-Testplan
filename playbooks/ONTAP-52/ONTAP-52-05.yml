################################################################################
#
# Title:        ONTAP-52-05 - Access Backup (read-only)
# Author:       NetApp Inc. (badrian)
# Initial 
# Create Date:  2024-01-08
# Description:  Backup (SnapMirror)
#               - Access Backup
#
# URLs:         https://docs.netapp.com/us-en/ontap/index.html
#               https://galaxy.ansible.com/netapp/ontap
#
# Built-in help:
# ansible-doc netapp.ontap.<module_name>
# 
################################################################################

- hosts:              "{{ global_secondary_test_cluster }}"
  name:               "ONTAP-52-05 - Access Backup (read-only) - ONTAP"
  gather_facts:       false
  vars:
    input: &input
      hostname:                   "{{ ansible_host }}"
      username:                   "{{ ontap_admin_user }}"
      password:                   "{{ ontap_admin_password }}"
      https:                      true
      validate_certs:             false
      use_rest:                   "always"
  vars_files:
    - ../../vars/{{ inventory_dir | split('/') | last }}/vars.yml
    - ../../vars/{{ inventory_dir | split('/') | last }}/vault.yml
  collections:
    - netapp.ontap

  pre_tasks:

  tasks:
    - name: Apply read-only export policy to backup volume & mount it to SVM's namespace
      netapp.ontap.na_ontap_volume:
        state:                      present
        name:                       "{{ ontap_52_vol_name }}_dst"
        vserver:                    "{{ global_primary_backup_svm }}"
        export_policy:              "ro_{{ global_primary_backup_svm }}"
        junction_path:              "/{{ ontap_52_vol_name }}_dst"
        <<: *input

    - name: Create read-write export policy
      netapp.ontap.na_ontap_export_policy:
        state:                      present
        name:                       "{{ ontap_52_policy_name }}"
        vserver:                    "{{ global_primary_backup_svm }}"
        <<: *input

    - name: Create read-write export policy rules
      na_ontap_export_policy_rule:
        state:                      present
        name:                       "{{ ontap_52_policy_name }}"
        vserver:                    "{{ global_primary_backup_svm }}"
        client_match:               "{{ groups['linux'] | map('extract', hostvars, ['ansible_host']) }}"
        ro_rule:                    "any"
        rw_rule:                    "none"
        protocol:                   "nfs"
        super_user_security:        "any"
        allow_suid:                 true
        <<: *input

    - name: Apply read-write export policy to UNIX qtree
      netapp.ontap.na_ontap_qtree:
        state:                      present
        name:                       "{{ ontap_52_lin_qtree_name }}"
        flexvol_name:               "{{ ontap_52_vol_name }}_dst"
        export_policy:              "{{ ontap_52_policy_name }}"
        vserver:                    "{{ global_primary_backup_svm }}"
        <<: *input

    - name: Create share
      netapp.ontap.na_ontap_cifs:
        state:                      present
        name:                       "{{ ontap_52_win_qtree_name }}_dst"
        path:                       "/{{ ontap_52_vol_name }}_dst/{{ ontap_52_win_qtree_name }}"
        vserver:                    "{{ global_primary_backup_svm }}"
        browsable:                  true
        oplocks:                    true
        show_snapshot:              true
        comment:                    "Test share created as part of test frame ONTAP-52"
        <<: *input

    - name: Remove "Full Control" for "Everyone"
      netapp.ontap.na_ontap_cifs_acl:
        state:                      absent
        share_name:                 "{{ ontap_52_win_qtree_name }}_dst"
        vserver:                    "{{ global_primary_backup_svm }}"
        user_or_group:              "Everyone"
        permission:                 "full_control"
        <<: *input

    - name: Create ACL on test share (admins - read-only)
      netapp.ontap.na_ontap_cifs_acl:
        state:                      present
        share_name:                 "{{ ontap_52_win_qtree_name }}_dst"
        vserver:                    "{{ global_primary_backup_svm }}"
        user_or_group:              "{{ ontap_52_ad_admin_group }}"
        permission:                 "read"
        <<: *input

  post_tasks:

- hosts:              "linux"
  name:               "ONTAP-52-05 - Access Backup (read-only) - Linux"
  gather_facts:       false
  vars_files:
    - ../../vars/{{ inventory_dir | split('/') | last }}/vars.yml
    - ../../vars/{{ inventory_dir | split('/') | last }}/vault.yml
  collections:
    - ansible.posix
    - community.general

  pre_tasks:

  tasks:
    - name: Ensure stale mounts are removed before proceding (in case a mount exists)
      ansible.posix.mount:
        state:                         "absent"
        src:                           "{{ global_primary_backup_svm }}.{{ all_default_dns_domain }}:/\
                                        {{ ontap_52_vol_name }}_dst/{{ ontap_52_lin_qtree_name }}"
        path:                          "{{ linux_52_mount_dir }}/{{ ontap_52_lin_qtree_name }}_dst"
#        opts:                          "rw,sync,hard,vers=3"
        fstype:                        "nfs"
  
    - name: Create mount directory
      ansible.builtin.file:
        path:                          "{{ linux_52_mount_dir }}/{{ ontap_52_lin_qtree_name }}_dst"
        state:                         "directory"
        mode:                          "0755"
  
    - name: Mount NFS export on Linux host (read-only)
      ansible.posix.mount:
        state:                         "mounted"
        src:                           "{{ global_primary_backup_svm }}.{{ all_default_dns_domain }}:/\
                                        {{ ontap_52_vol_name }}_dst/{{ ontap_52_lin_qtree_name }}"
        path:                          "{{ linux_52_mount_dir }}/{{ ontap_52_lin_qtree_name }}_dst"
        opts:                          "ro"
#        opts:                          "rw,sync,hard,vers=3"
        fstype:                        "nfs"
  
  post_tasks:

- hosts:              "win_hosts"
  name:               "ONTAP-52-05 - Access Backup (read-only) - Windows"
  gather_facts:       false
  vars_files:
    - ../../vars/{{ inventory_dir | split('/') | last }}/vars.yml
    - ../../vars/{{ inventory_dir | split('/') | last }}/vault.yml
  collections:
    - ansible.windows
    - community.windows

  pre_tasks:

  tasks:
    - name: Create mount directory
      ansible.windows.win_file:
        path:                          "{{ windows_52_mount_dir }}"
        state:                         directory

    - name: 
      block:
        - name: Save network credentials
          community.windows.win_credential:
            state:                     present
            name:                      "{{ global_primary_backup_svm }}"
            type:                      "domain_password"
            username:                  "{{ ontap_52_ad_admin_user }}"
            secret:                    "{{ ontap_52_ad_admin_user_pw }}"
        
        - name: Map share
          community.windows.win_shortcut:
            state:                     present
            src:                       "\\\\{{ global_primary_backup_svm }}\\{{ ontap_52_win_qtree_name }}"
            dest:                      "{{ windows_52_mount_dir }}\\{{ ontap_52_win_qtree_name }}_dst.lnk"
      vars:
        # become is required to save and retrieve the credentials in the tasks
        ansible_become:           "yes"
        ansible_become_method:    "runas"
        ansible_become_user:      "{{ ansible_user }}"
        ansible_become_pass:      "{{ ansible_password }}"

  post_tasks: