################################################################################
#
# Title:        ONTAP-00-01.yml
# Author:       NetApp Inc. (badrian)
# Date:         2023-07-25
# Description:  Initial cluster configuration for testing
#
# URLs:         https://docs.netapp.com/us-en/ontap/index.html
#               https://galaxy.ansible.com/netapp/ontap
#
# Built-in help:
# ansible-doc <module.name>
# 
################################################################################

- hosts:              "{{ ontap_primary_cluster }}"
  name:               ONTAP-00-01
  gather_facts:       false
  vars_prompt:
    - name:           testenv_ad_join_pw
      prompt:         "Please enter password for user  {{ testenv_ad_join_user }}"
      private:        true
  vars:
    input: &input
      username:       "{{ ontap_admin_user }}"
      password:       "{{ ontap_admin_password }}"
      https:          true
      validate_certs: false
  vars_files:
    - vars/vars_labondemand.yml
  collections:
    - netapp.ontap

  tasks:
  - name: PLACEHOLDER - 2FA Setup
    ansible.builtin.debug:
      msg: "PLACEHOLDER - 2FA Setup"
  
  - name: Create DNS config on storage cluster
    netapp.ontap.na_ontap_dns:
      state:                      present
      vserver:                    "{{ inventory_hostname }}"
      domains:                    "{{ testenv_dns_domains }}"
      nameservers:                "{{ testenv_dns_nameservers }}"
      hostname:                   "{{ ansible_host }}"
      use_rest:                   "always"
      <<: *input

  - name: Create NTP server on storage cluster
    netapp.ontap.na_ontap_ntp:
      state:                      present
      server_name:                "{{ item }}"
      version:                    "auto"
      hostname:                   "{{ ansible_host }}"
      use_rest:                   "always"
      <<: *input
    loop:
      "{{ testenv_ntp_serveres }}"

  - name: Set timezone on storage cluster
    netapp.ontap.na_ontap_cluster:
      state:                      present
      timezone:
        name:                     "{{ testenv_timezone }}"
      hostname:                   "{{ ansible_host }}"
      use_rest:                   "always"
      <<: *input

  - name: Configure onboard Key Manager
    netapp.ontap.na_ontap_security_key_manager:
      state:                      present
      onboard:
        passphrase:               "{{ testenv_keymanager_passphrase }}!"
      hostname:                   "{{ ansible_host }}"
      use_rest:                   "always"
      <<: *input

  - name: Disable automatic encryption of storage objects
    netapp.ontap.na_ontap_svm_options:
      vserver:                    "{{ ontap_primary_cluster }}"
      name:                       "encryption.data_at_rest_encryption.disable_by_default"
      value:                      "on"
      hostname:                   "{{ ansible_host }}"
      use_rest:                   "always"
      <<: *input

  - name: Create SVMs for testing
    netapp.ontap.na_ontap_svm:
      state:                      present
      name:                       "{{ item.name }}"
      services:
        cifs:
          allowed: true
        nfs:
          allowed: true
          enabled: true
        fcp:
          allowed: false
        iscsi:
          allowed: false
        nvme:
          allowed: false
      hostname:                   "{{ ansible_host }}"
      use_rest:                   "always"
      <<: *input
    loop:
      "{{ ontap_svms }}"
    loop_control:
      label: "{{ item.name }}"

  - name: Patch SVM parameters for automatic analytics and activity tracking features
    netapp.ontap.na_ontap_rest_cli:
      command:                    'vserver'
      verb:                       'PATCH'
      params: 
        vserver:                  "{{ item.name }}"
      body:
        auto-enable-analytics:    true
        auto-enable-activity-tracking: true
      hostname:                   "{{ ansible_host }}"
      use_rest:                   "always"
      <<: *input
    loop:
      "{{ ontap_svms }}"
    loop_control:
      label: "{{ item.name }}"

  - name: Patch SVM NFS service to support 64-bit file identifiers by default
    netapp.ontap.na_ontap_rest_cli:
      command:                    'vserver/nfs'
      verb:                       'PATCH'
      params: 
        vserver:                  "{{ item.name }}"
      body:
        v3-64bit-identifiers:     "enabled"
      hostname:                   "{{ ansible_host }}"
      use_rest:                   "always"
      <<: *input
    loop:
      "{{ ontap_svms }}"
    loop_control:
      label: "{{ item.name }}"
  
  - name: Create network interfaces on SVMs
    netapp.ontap.na_ontap_interface:
      state:                      present
      vserver:                    "{{ item[0].name }}"
      interface_name:             "{{ item[1].lifname }}"
      home_node:                  "{{ item[1].node }}"
      home_port:                  "{{ item[1].port }}"
      address:                    "{{ item[1].ip }}"
      netmask:                    "{{ item[1].netmask }}"
      service_policy:             "{{ item[1].service_policy }}"
      is_auto_revert:             true
      hostname:                   "{{ ansible_host }}"
      use_rest:                   "always"
      <<: *input
    loop:
#      "{{ ontap_svms | subelements('lifs', 'skip_missing=True') }}"
      "{{ q('ansible.builtin.subelements', ontap_svms, 'lifs', {'skip_missing': True}) }}"
    loop_control:
      label: "{{ item[0].name }} - {{ item[1].lifname }}"

  - name: Configure default route on SVMs
    netapp.ontap.na_ontap_net_routes:
      state:                      present
      vserver:                    "{{ item.name }}"
      destination:                "0.0.0.0/0"
      gateway:                    "{{ testenv_default_gateway }}"
      hostname:                   "{{ ansible_host }}"
      use_rest:                   "always"
      <<: *input
    loop:
      "{{ ontap_svms }}"
    loop_control:
      label: "{{ item.name }}"

  - name: Configure DNS on SVMs
    netapp.ontap.na_ontap_dns:
      state:                      present
      vserver:                    "{{ item.name }}"
      domains:                    "{{ testenv_dns_domains }}"
      nameservers:                "{{ testenv_dns_nameservers }}"
      hostname:                   "{{ ansible_host }}"
      use_rest:                   "always"
      <<: *input
    loop:
      "{{ ontap_svms }}"
    loop_control:
      label: "{{ item.name }}"

  - name: Create CIFS server on SVMs
    netapp.ontap.na_ontap_cifs_server:
      state:                      present
      name:                       "{{ item.cifs_name }}"                  
      vserver:                    "{{ item.name }}"
      service_state:              started
      domain:                     "{{ testenv_ad_domain }}"
      ou:                         "{{ testenv_storage_ad_ou_path }}"
      admin_user_name:            "{{ testenv_ad_join_user }}"
      admin_password:             "{{ testenv_ad_join_pw }}"
      hostname:                   "{{ ansible_host }}"
      use_rest:                   "always"
      <<: *input
    loop:
      "{{ ontap_svms }}"
    loop_control:
      label: "{{ item.name }}"

  - name: Create ro export policy (aka "storage group") for SVM root volume
    netapp.ontap.na_ontap_export_policy:
      state:                      present
      name:                       "ro_{{ item.name }}"
      vserver:                    "{{ item.name }}"
      hostname:                   "{{ ansible_host }}"
      use_rest:                   "always"
      <<: *input
    loop:
      "{{ ontap_svms }}"
    loop_control:
      label: "{{ item.name }}"

  - name: Create ro export policy rules for SVM root volume
    na_ontap_export_policy_rule:
      state:                      present
      name:                       "ro_{{ item.name }}"
      vserver:                    "{{ item.name }}"
      client_match:               "0.0.0.0/0"
      ro_rule:                    "any"
      rw_rule:                    "none"
      protocol:                   "nfs"
      super_user_security:        "none"
      allow_suid:                 false
      hostname:                   "{{ ansible_host }}"
      use_rest:                   "always"
      <<: *input
    loop:
      "{{ ontap_svms }}"
    loop_control:
      label: "{{ item.name }}"

  - name: Apply RO export policy to SVM root volume
    netapp.ontap.na_ontap_volume:
      state:                      present
      name:                       "{{ item.name.replace('-','_') }}_root"
      vserver:                    "{{ item.name }}"
      export_policy:              "ro_{{ item.name }}"
      hostname:                   "{{ ansible_host }}"
      use_rest:                   "always"
      <<: *input
    loop:
      "{{ ontap_svms }}"
    loop_control:
      label: "{{ item.name }}" 