################################################################################
#
# Title:        init_ontap.yml
# Author:       NetApp Inc. (badrian)
# Date:         2023-07-31
# Description:  Prepare lab system
# 
# URLs:         https://docs.netapp.com/us-en/ontap/index.html
#               https://galaxy.ansible.com/netapp/ontap
# 
# Built-in help:
# ansible-doc netapp.ontap.na_ontap_aggregate
# ansible-doc netapp.ontap.na_ontap_rest_info
#
################################################################################

- hosts:              "ontap"
  name:               "Initialize ONTAP clusters"
  gather_facts:       false
  vars:
    input: &input
      username:       "{{ ontap_admin_user }}"
      password:       "{{ ontap_admin_password }}"
      https:          true
      validate_certs: false
      use_rest:       "Always"
  vars_files:
    - ../../playbooks/vars/vars_labondemand.yml
  collections:
    - netapp.ontap

  tasks:
  - name: Get all non-root volumes from lab clusters
    netapp.ontap.na_ontap_rest_info:
      gather_subset:
      - "storage/volumes"
      fields:
      - "svm"
      parameters:
        is_svm_root:              false
      use_python_keys:            true
      hostname:                   "{{ ansible_host }}"
      <<: *input
    register: vol_info

  - name: Delete all volumes from lab clusters
    netapp.ontap.na_ontap_volume:
      state:                      absent
      name:                       "{{ item.name }}"
      vserver:                    "{{ item.svm.name }}" 
      wait_for_completion:        true
      hostname:                   "{{ ansible_host }}"
      <<: *input
    when:
    - vol_info.ontap_info.storage_volumes.num_records|int > 0
    - item.name is defined
    loop:
      "{{ vol_info.ontap_info.storage_volumes.records }}"

  - name: Get all SVM CIFS servers
    netapp.ontap.na_ontap_rest_info:
      gather_subset:
      - "protocols/cifs/services"
      fields:
      - "*"
      use_python_keys:            true
      hostname:                   "{{ ansible_host }}"
      <<: *input
    register: cifs_service_info

  - name: Delete all SVM CIFS servers
    netapp.ontap.na_ontap_cifs_server:
      state:                      absent
      name:                       "{{ item.name }}"                  
      vserver:                    "{{ item.svm.name }}"
      domain:                     "{{ item.ad_domain.fqdn }}"
      ou:                         "{{ item.ad_domain.organizational_unit }}"
      admin_user_name:            "{{ testenv_ad_join_user }}"
      admin_password:             "{{ testenv_ad_join_password }}"
      hostname:                   "{{ ansible_host }}"
      <<: *input
    when:
    - cifs_service_info.ontap_info.protocols_cifs_services.num_records|int > 0
    - item.name is defined
    loop:
      "{{ cifs_service_info.ontap_info.protocols_cifs_services.records }}"

  - name: Get all SVM interfaces from lab clusters
    netapp.ontap.na_ontap_rest_info:
      gather_subset:
      - "network/ip/interfaces"
      fields:
      - "svm"
      - "scope"
      - "service_policy"
      parameters:
        scope:                    "svm"
      use_python_keys:            true
      hostname:                   "{{ ansible_host }}"
      <<: *input
    register: ip_int_info

  - name: Delete all SVM network interfaces from lab clusters
    netapp.ontap.na_ontap_interface:
      state:                      absent
      interface_name:             "{{ item.name }}"
      vserver:                    "{{ item.svm.name }}"
      hostname:                   "{{ ansible_host }}"
      <<: *input
    when:
    - ip_int_info.ontap_info.network_ip_interfaces.num_records|int > 0
    - item.name is defined
    - item.scope == "svm"
    loop:
      "{{ ip_int_info.ontap_info.network_ip_interfaces.records }}"

  - name: Get all intercluster interfaces from lab clusters
    netapp.ontap.na_ontap_rest_info:
      gather_subset:
      - "network/ip/interfaces"
      fields:
      - "svm"
      - "scope"
      - "service_policy"
      parameters:
        scope:                    "cluster"
        service_policy.name:      "default-intercluster"
      use_python_keys:            true
      hostname:                   "{{ ansible_host }}"
      <<: *input
    register: ip_int_info

  - name: Delete intercluster interfaces from lab clusters
    netapp.ontap.na_ontap_interface:
      state:                      absent
      interface_name:             "{{ item.name }}"
      hostname:                   "{{ ansible_host }}"
      <<: *input
    when:
    - ip_int_info.ontap_info.network_ip_interfaces.num_records|int > 0
    - item.name is defined
    - item.scope == "cluster"
    - item.service_policy.name == "default-intercluster"
    loop:
      "{{ ip_int_info.ontap_info.network_ip_interfaces.records }}"

  - name: Get all SVMs
    netapp.ontap.na_ontap_rest_info:
      gather_subset:
      - "svm/svms"
      use_python_keys:            true
      hostname:                   "{{ ansible_host }}"
      <<: *input
    register: svm_info

  - name: Delete all SVMs
    netapp.ontap.na_ontap_svm:
      state:                      absent
      name:                       "{{ item.name }}"                  
      hostname:                   "{{ ansible_host }}"
      <<: *input
    when:
    - svm_info.ontap_info.svm_svms.num_records|int > 0
    - item.name is defined
    loop:
      "{{ svm_info.ontap_info.svm_svms.records }}"